{
  "contractName": "Sha_gate",
  "constructorInputs": [
    {
      "name": "hashOperatorKeys",
      "type": "bytes20"
    },
    {
      "name": "startPeriodBytes",
      "type": "bytes8"
    },
    {
      "name": "payout",
      "type": "bytes31"
    },
    {
      "name": "voteCountBytes",
      "type": "bytes2"
    }
  ],
  "abi": [
    {
      "name": "lock",
      "inputs": []
    },
    {
      "name": "initWithdrawal",
      "inputs": [
        {
          "name": "s0",
          "type": "sig"
        },
        {
          "name": "s1",
          "type": "sig"
        },
        {
          "name": "s2",
          "type": "sig"
        },
        {
          "name": "pk0",
          "type": "pubkey"
        },
        {
          "name": "pk1",
          "type": "pubkey"
        },
        {
          "name": "pk2",
          "type": "pubkey"
        },
        {
          "name": "pk3",
          "type": "pubkey"
        },
        {
          "name": "pk4",
          "type": "pubkey"
        },
        {
          "name": "newPayout",
          "type": "bytes31"
        }
      ]
    },
    {
      "name": "vote",
      "inputs": [
        {
          "name": "coinbaseTx",
          "type": "bytes"
        },
        {
          "name": "agree",
          "type": "bool"
        }
      ]
    },
    {
      "name": "finishWithdrawal",
      "inputs": []
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_SUB 1027 OP_GREATERTHAN OP_VERIFY OP_0 OP_OUTPUTBYTECODE OP_0 OP_UTXOBYTECODE OP_EQUALVERIFY OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_4 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_8 OP_PICK OP_10 OP_PICK OP_CAT OP_11 OP_PICK OP_CAT OP_12 OP_PICK OP_CAT OP_13 OP_PICK OP_CAT OP_HASH160 OP_EQUALVERIFY OP_0 OP_2ROT OP_SWAP OP_6 OP_ROLL OP_3 OP_8 OP_ROLL OP_9 OP_ROLL OP_10 OP_ROLL OP_11 OP_ROLL OP_12 OP_ROLL OP_5 OP_CHECKMULTISIGVERIFY OP_BIN2NUM 2808 OP_ADD OP_CHECKLOCKTIMEVERIFY OP_DROP OP_3 OP_PICK OP_SIZE OP_NIP 1f OP_NUMEQUALVERIFY 0200001f OP_4 OP_ROLL OP_CAT OP_8 OP_CAT OP_TXLOCKTIME OP_8 OP_NUM2BIN OP_CAT OP_ACTIVEBYTECODE 2c OP_SPLIT OP_NIP OP_CAT OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_UTXOVALUE e803 OP_SUB OP_0 OP_OUTPUTVALUE OP_NUMEQUALVERIFY a914 OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_OUTPUTBYTECODE OP_EQUAL OP_NIP OP_NIP OP_NIP OP_ELSE OP_4 OP_PICK OP_2 OP_NUMEQUAL OP_IF OP_1 OP_OUTPOINTTXHASH OP_6 OP_PICK OP_HASH256 OP_EQUALVERIFY OP_0 20 OP_NUM2BIN OP_6 OP_PICK 29 OP_SPLIT OP_DROP 0100000001 OP_ROT OP_CAT ffffffff OP_CAT OP_EQUALVERIFY OP_1 OP_OUTPOINTINDEX OP_0 OP_NUMEQUALVERIFY OP_5 OP_ROLL 2b OP_SPLIT OP_NIP OP_3 OP_SPLIT OP_DROP OP_BIN2NUM OP_ROT OP_BIN2NUM OP_GREATERTHAN OP_VERIFY OP_ROT OP_BIN2NUM OP_4 OP_ROLL OP_IF OP_DUP OP_1ADD OP_NIP OP_ELSE OP_DUP OP_2 OP_SUB OP_NIP OP_ENDIF OP_2 OP_NUM2BIN OP_2 OP_SWAP OP_CAT OP_ACTIVEBYTECODE OP_3 OP_SPLIT OP_NIP OP_CAT OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_UTXOVALUE e803 OP_SUB OP_0 OP_OUTPUTVALUE OP_NUMEQUALVERIFY a914 OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_OUTPUTBYTECODE OP_EQUAL OP_NIP OP_NIP OP_NIP OP_ELSE OP_4 OP_ROLL OP_3 OP_NUMEQUALVERIFY OP_ROT 17 OP_SPLIT OP_BIN2NUM OP_1 OP_OUTPUTVALUE OP_OVER OP_NUMEQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_ROT OP_EQUALVERIFY OP_ROT OP_BIN2NUM e007 OP_ADD OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ROT OP_BIN2NUM OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_0 1f OP_NUM2BIN 0200001f OP_SWAP OP_CAT OP_ACTIVEBYTECODE 23 OP_SPLIT OP_NIP OP_CAT OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_UTXOVALUE OP_ROT OP_SUB e803 OP_SUB OP_0 OP_OUTPUTVALUE OP_NUMEQUALVERIFY a914 OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_0 OP_OUTPUTBYTECODE OP_EQUAL OP_NIP OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.7.0;\r\n\r\n// Sha-gate covenant enables trust-minimized briding to Smart BCH\r\n\r\n// One Sha-gate covenant can bridge any number of deposits to the SBCH sidechain.\r\n// The return from the sidechain to the mainchain works in 2 steps \r\n// First m-of-n operators propose a withdrawal tranasction from the sidechain covenant.\r\n// Then miners have a fixed window to vote on the proposal.\r\n// If a large percentage (now set to 66%Â°) approves of the withdrawal when the voting period ends \r\n// then the withdrawal gets processed. The withdrawl transaction is to a covenant which batches withdrawals \r\n// to any number of addresses. The Sha-gate would manage a large amount of BCH so withdrawals \r\n// to the mainchain can be slow so there is plenty of time for miner voting within the window.\r\n// The withdrawal function of the contract can also be used to perform L1 burning of BCH\r\n// and to upgrade the contract code or remove malicious/compromised operators.\r\n\r\n// Chosen security parameters:\r\n// - M-of N for operator keys: 3-of-5 (can easily be extended to 5-of-7 or even larger)\r\n// - Voting period: 2016 blocks (~2 weeks worth of blocks), after which finishWithdrawal is enabled\r\n// - Agree-voting threshold for valid withdrawal: 66%\r\n// - Withdrawal period: 72 blocks (.5 day worth of blocks), after which initWithdrawal is enabled\r\n//   If no votes are placed at all the withdrawal is also valid.\r\n// - Minimum bridge amount: 10000 sats\r\n\r\n// See notes on 20byte P2SHash collision vulnerability\r\n\r\n// Opcode count: 181 (max 201)\r\n// Bytesize: 377 (max 520)\r\n\r\ncontract Sha_gate(\r\n   // constant constructor parameters\r\n   bytes20 hashOperatorKeys,\r\n\r\n   // constructor parameters of simulated state\r\n   // last because constructor parameters are added in reverse order\r\n   bytes8 startPeriodBytes, // start of the period in block height, updated at initWithdrawal\r\n   bytes31 payout, // bytes23 P2SH + bytes8 amount \r\n   bytes2 voteCountBytes // up to ~32000 or 227 days of votes\r\n) {\r\n   // lock extra funds in the covenant to bridge them\r\n   function lock(\r\n   ) {\r\n      // require the SHA-gate covenant to be at index0\r\n      // allows for more than 2 inputs\r\n      require(this.activeInputIndex == 0);\r\n      // briding can have change output so SBCH amount is difference in contract value before and after\r\n      int amountBridged = tx.outputs[0].value - tx.inputs[0].value;\r\n      // enforces minimum amount for the bridge\r\n      // implicity requires tx.outputs[0].value > tx.inputs[0].value\r\n      require(amountBridged > 10000);\r\n      // bytecode of SHA-gate covenant should not change\r\n      require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);\r\n   }\r\n\r\n   // initialize a withdrawal proposal\r\n   function initWithdrawal(\r\n      sig s0, \r\n      sig s1,  \r\n      sig s2,\r\n      pubkey pk0,\r\n      pubkey pk1,\r\n      pubkey pk2,\r\n      pubkey pk3,\r\n      pubkey pk4,\r\n      bytes31 newPayout // bytes23 P2SH + bytes8 amount\r\n   ) {\r\n      // require the provided operator pks to match hashOperatorKeys\r\n      // does not curently check that they are all the right length\r\n      require(hash160(pk0+pk1+pk2+pk3+pk4) == hashOperatorKeys);\r\n      // require 3-of-5 operators to sign the tx to the new state\r\n      require(checkMultiSig([s0,s1,s2],[pk0,pk1,pk2,pk3,pk4]));\r\n      \r\n      // initWithdrawal can only be called at least 2088 blocks after startPeriod\r\n      // when initWithdrawal is called late, the following voting period is shorter by the number of blocks\r\n      require(tx.time >= int(startPeriodBytes) + 2088); // startPeriod + (voting period + withdrawal period)\r\n\r\n      // check length newPayout before adding to simulated state\r\n      require(newPayout.length == 31);\r\n      // update payout P2SH, startPeriodBytes and clear vote count\r\n      bytes newContract = 0x0200001f + newPayout + 0x08 + bytes8(tx.locktime) + this.activeBytecode.split(44)[1];// 3+32+9\r\n      // require the SHA-gate covenant to be at index0\r\n      // so that tx.inputs[0].value is value of SHA-gate covenant\r\n      require(this.activeInputIndex == 0);\r\n      int amount = tx.inputs[0].value - 1000; // 1000 is hardcoded fee\r\n      require(tx.outputs[0].value == amount);\r\n      bytes23 out = new LockingBytecodeP2SH(hash160(newContract));\r\n      require(tx.outputs[0].lockingBytecode == out);\r\n   }\r\n\r\n   // miners vote for whether payout of amount to P2SH can be sent or not\r\n   function vote(\r\n      bytes coinbaseTx,\r\n      bool agree\r\n   ) {\r\n      // get the coinbaseTxID to check again hash of coinbaseTx\r\n      bytes coinbaseTxID = tx.inputs[1].outpointTransactionHash;\r\n      require(hash256(coinbaseTx) == coinbaseTxID);\r\n      // check parent transaction is coinbase tx by checking\r\n      // version of 1, inputcount of 1, txID of all zeroes, and the vout all f's\r\n      bytes32 allZeroTxid= bytes32(0); // saves a ton on bytesize\r\n      require(coinbaseTx.split(41)[0] == 0x0100000001 + allZeroTxid + 0xffffffff); // 5+32+4 = 41\r\n      // use coinbase output with vout 0 as input on index 1\r\n      // this disables the ability for outputs from the same coinbase to vote multiple times\r\n      // each SHA-gate covenant should use a different hardcoded number for the coinbase vout.\r\n      require(tx.inputs[1].outpointIndex == 0);\r\n      \r\n      // parse coinbaseTx for 3 bytes blockheight in coinbase data field after 0x03, see BIP 0034\r\n      bytes coinbaseBlockHeight = coinbaseTx.split(43)[1].split(3)[0]; // 4+1+32+4+1+1 = 43\r\n      // height of the coinbase input must be greater than startPeriod\r\n      require(int(coinbaseBlockHeight) > int(startPeriodBytes));\r\n\r\n      int voteCount = int(voteCountBytes);\r\n      // implements 66% agree-voting threshold\r\n      if(agree) {\r\n         voteCount = voteCount + 1;\r\n      } else {\r\n         voteCount = voteCount - 2;\r\n      }\r\n      bytes2 newVoteCountBytes = bytes2(voteCount);\r\n\r\n      // update vote count\r\n      bytes newContract = 0x02 + newVoteCountBytes + this.activeBytecode.split(3)[1];// 3\r\n      require(this.activeInputIndex == 0);\r\n      // require the SHA-gate covenant to be at index0\r\n      // so that tx.inputs[0].value is value of SHA-gate covenant\r\n      int amount = tx.inputs[0].value - 1000; // 1000 is hardcoded fee\r\n      require(tx.outputs[0].value == amount);\r\n      bytes23 out = new LockingBytecodeP2SH(hash160(newContract));\r\n      require(tx.outputs[0].lockingBytecode == out);\r\n   }\r\n\r\n   // finish the withdrawal process\r\n   function finishWithdrawal(\r\n   ) {\r\n      bytes23 payoutP2SH, bytes8 amountPayoutBytes = payout.split(23);\r\n      int amountPayout = int(amountPayoutBytes); // saves one opcode\r\n      require(tx.outputs[1].value == amountPayout);\r\n      require(tx.outputs[1].lockingBytecode == payoutP2SH);\r\n      // finishWithdrawal can only be called at least 2016 blocks after startPeriod\r\n      require(tx.time >= int(startPeriodBytes) + 2016); // startPeriod + voting period\r\n      require(int(voteCountBytes) >= 0);\r\n\r\n      // clear votes and payout\r\n      bytes31 allZeroPayout = bytes31(0); // saves a ton on bytesize\r\n      bytes clearedContract = 0x0200001f+ allZeroPayout + this.activeBytecode.split(35)[1];// 1+2+1+31\r\n      // require the SHA-gate covenant to be at index0\r\n      // so that tx.inputs[0].value is value of SHA-gate covenant\r\n      require(this.activeInputIndex == 0);\r\n      int amountLeft = tx.inputs[0].value - amountPayout - 1000; // 1000 is hardcoded fee\r\n      require(tx.outputs[0].value == amountLeft);\r\n      bytes23 out = new LockingBytecodeP2SH(hash160(clearedContract));\r\n      require(tx.outputs[0].lockingBytecode == out);\r\n   }\r\n}\r\n",
  "compiler": {
    "name": "cashc",
    "version": "0.7.0"
  },
  "updatedAt": "2024-05-22T12:51:55.588Z"
}